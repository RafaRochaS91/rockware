---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import TagChip from '../../components/TagChip.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';

import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';

const posts = (await getCollection('blog')).sort(
  (a: any, b: any) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

// Get URL parameters (simplified)
const url = Astro.request.url;
const selectedTag = Astro.url.searchParams.get('tag');

// Get all unique tags
const allTags = [];
const tagMap = {};
posts.forEach(post => {
  if (post.data.tags) {
    post.data.tags.forEach(tag => {
      if (!tagMap[tag]) {
        tagMap[tag] = true;
        allTags.push(tag);
      }
    });
  }
});

// Filter posts based on selected tag
const filteredPosts = selectedTag 
  ? posts.filter(post => post.data.tags && post.data.tags.includes(selectedTag))
  : posts;
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    <style>
      main {
        width: 960px;
        max-width: 100%;
        padding: 0 1rem;
      }
      
      .filter-section {
        margin-bottom: 2rem;
        padding: 1.5rem;
        background: rgb(var(--gray-gradient));
        border-radius: 12px;
        border: 1px solid rgb(var(--gray-light));
      }
      
      .filter-title {
        margin: 0 0 1rem 0;
        color: rgb(var(--black));
        font-size: 1.2rem;
        font-weight: 600;
      }
      
      .filter-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        align-items: center;
      }
      
      .clear-filter {
        color: rgb(var(--accent));
        text-decoration: none;
        font-size: 0.9rem;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        transition: background 0.2s ease;
      }
      
      .clear-filter:hover {
        background: rgb(var(--accent-light));
      }
      
      .posts-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
        gap: 1.5rem;
        list-style-type: none;
        margin: 0;
        padding: 0;
      }
      
      .post-card {
        background: rgb(var(--gray-gradient));
        border: 1px solid rgb(var(--gray-light));
        border-radius: 12px;
        overflow: hidden;
        transition: all 0.2s ease;
        height: fit-content;
      }
      
      .post-card:hover {
        border-color: rgb(var(--accent));
        transform: translateY(-4px);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
      }
      
      .post-card a {
        display: block;
        text-decoration: none;
        color: inherit;
        height: 100%;
      }
      
      .post-image {
        width: 100%;
        aspect-ratio: 16/9;
        object-fit: cover;
      }
      
      .post-content {
        padding: 1.25rem;
      }
      
      .post-title {
        margin: 0 0 0.75rem 0;
        color: rgb(var(--black));
        line-height: 1.3;
        font-weight: 600;
        font-size: 1.25rem;
        transition: color 0.2s ease;
      }
      
      .post-card:hover .post-title {
        color: rgb(var(--accent));
      }
      
      .post-date {
        margin: 0 0 0.75rem 0;
        color: rgb(var(--gray));
        font-size: 0.9rem;
      }
      
      .post-tags {
        margin: 0.75rem 0;
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
      }
      
      .read-more {
        margin-top: 0.75rem;
        color: rgb(var(--accent));
        font-size: 0.9rem;
        font-weight: 500;
      }
      
      .read-more::after {
        content: ' →';
        transition: transform 0.2s ease;
      }
      
      .post-card:hover .read-more::after {
        transform: translateX(4px);
      }
      
      .no-posts {
        text-align: center;
        padding: 3rem 1rem;
        color: rgb(var(--gray));
        background: rgb(var(--gray-gradient));
        border-radius: 12px;
        border: 1px solid rgb(var(--gray-light));
      }
      
      .no-posts h3 {
        margin: 0 0 1rem 0;
        color: rgb(var(--black));
      }
      
      .no-posts a {
        color: rgb(var(--accent));
        text-decoration: none;
      }
      
      .no-posts a:hover {
        text-decoration: underline;
      }
      
      /* Responsive design */
      @media (max-width: 768px) {
        main {
          width: 100%;
          padding: 0 1rem;
        }
        
        .posts-grid {
          grid-template-columns: 1fr;
          gap: 1rem;
        }
        
        .filter-section {
          padding: 1rem;
        }
        
        .post-content {
          padding: 1rem;
        }
      }
      
      @media (max-width: 480px) {
        .post-content {
          padding: 0.75rem;
        }
        
        .post-title {
          font-size: 1.1rem;
        }
        
        .filter-tags {
          gap: 0.25rem;
        }
      }
    </style>
  </head>
  <body>
    <Header />
    <main>
      <!-- Filter Section -->
      <section class="filter-section">
        <h3 class="filter-title">Filter by Tag</h3>
        <div class="filter-tags">
          {selectedTag && (
            <a href="/blog/" class="clear-filter">× Clear Filter</a>
          )}
          {allTags.map(tag => (
            <TagChip 
              tag={tag} 
              isActive={selectedTag === tag}
              href={selectedTag === tag ? "/blog/" : `/blog/?tag=${tag}`}
            />
          ))}
        </div>
      </section>

      <!-- Posts Grid -->
      <section>
        {filteredPosts.length > 0 ? (
          <ul class="posts-grid">
            {filteredPosts.map((post: any) => (
              <li class="post-card">
                <a href={`/blog/${post.id}/`}>
                  {post.data.heroImage && (
                    <Image
                      class="post-image"
                      width={400}
                      height={225}
                      src={post.data.heroImage}
                      alt=""
                    />
                  )}
                  <div class="post-content">
                    <h3 class="post-title">{post.data.title}</h3>
                    <p class="post-date">
                      <FormattedDate date={post.data.pubDate} />
                    </p>
                    {post.data.tags && (
                      <div class="post-tags">
                        {post.data.tags.map((tagName: string) => (
                          <TagChip 
                            tag={tagName} 
                            href={`/blog/?tag=${tagName}`}
                          />
                        ))}
                      </div>
                    )}
                    <p class="read-more">Read more</p>
                  </div>
                </a>
              </li>
            ))}
          </ul>
        ) : (
          <div class="no-posts">
            <h3>No posts found</h3>
            <p>No posts match the selected tag "{selectedTag}". <a href="/blog/">Clear filter</a> to see all posts.</p>
          </div>
        )}
      </section>
    </main>
    <Footer />
  </body>
</html>
